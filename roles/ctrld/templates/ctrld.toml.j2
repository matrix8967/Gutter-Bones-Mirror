# Control-D ctrld configuration
# Generated by Ansible on {{ ansible_date_time.iso8601 }}
# Managed by gutter_bonez automation - do not edit manually

[service]
# Service-level configuration
log_level = "{{ ctrld_log_level | default('info') }}"
{% if ctrld_log_dir is defined %}
log_path = "{{ ctrld_log_dir }}/ctrld.log"
{% endif %}

# Caching configuration
cache_enable = {{ ctrld_cache_enable | default(true) | lower }}
cache_size = {{ ctrld_cache_size | default(8192) }}
cache_ttl_override = {{ ctrld_cache_ttl | default(300) }}
cache_serve_stale = {{ ctrld_cache_serve_stale | default(true) | lower }}

# Performance tuning
max_concurrent_requests = {{ ctrld_max_concurrent_requests | default(1000) }}

# Client discovery settings
{% if not is_router | default(false) %}
discover_mdns = {{ ctrld_discover_mdns | default(true) | lower }}
discover_arp = {{ ctrld_discover_arp | default(true) | lower }}
discover_dhcp = {{ ctrld_discover_dhcp | default(true) | lower }}
discover_ptr = {{ ctrld_discover_ptr | default(true) | lower }}
discover_hosts = {{ ctrld_discover_hosts | default(true) | lower }}
{% else %}
discover_mdns = false
discover_arp = true
discover_dhcp = true
discover_ptr = false
discover_hosts = false
{% endif %}

# DHCP lease file configuration
{% if ctrld_dhcp_lease_file is defined %}
dhcp_lease_file_path = "{{ ctrld_dhcp_lease_file }}"
dhcp_lease_file_format = "{{ ctrld_dhcp_lease_format | default('dnsmasq') }}"
{% endif %}

# Metrics configuration
{% if ctrld_metrics_enable | default(false) %}
metrics_query_stats = true
metrics_listener = "{{ ctrld_metrics_listen | default('127.0.0.1:8080') }}"
{% endif %}

# DNS watchdog settings
dns_watchdog_enabled = {{ ctrld_dns_watchdog | default(true) | lower }}
dns_watchdog_interval = "{{ ctrld_watchdog_interval | default('20s') }}"

# Listener configuration
{% for listener_id, listener in ctrld_listeners.items() %}
[listener.{{ listener_id }}]
ip = "{{ listener.ip | default('127.0.0.1') }}"
port = {{ listener.port | default(53) }}
restricted = {{ listener.restricted | default(false) | lower }}
allow_wan_clients = {{ listener.allow_wan_clients | default(false) | lower }}

  [listener.{{ listener_id }}.policy]
  name = "{{ listener.policy_name | default('Policy ' + listener_id) }}"

  # Network rules - which networks can use which upstreams
  {% if listener.networks is defined %}
  {% for network_rule in listener.networks %}
  {% for network, upstreams in network_rule.items() %}
  networks = [
    { "{{ network }}" = {{ upstreams | to_json }} }
  ]
  {% endfor %}
  {% endfor %}
  {% else %}
  networks = [
    { "network.0" = ["upstream.0"] }
  ]
  {% endif %}

  # Domain-based routing rules
  {% if listener.rules is defined %}
  {% for domain_rule in listener.rules %}
  {% for domain, upstreams in domain_rule.items() %}
  rules = [
    { "{{ domain }}" = {{ upstreams | to_json }} }
  ]
  {% endfor %}
  {% endfor %}
  {% else %}
  rules = [
    { "*.local" = ["upstream.local"] },
    { "*.lan" = ["upstream.local"] }
  ]
  {% endif %}

  # MAC address based rules (useful for device-specific policies)
  {% if listener.macs is defined %}
  {% for mac_rule in listener.macs %}
  {% for mac, upstreams in mac_rule.items() %}
  macs = [
    { "{{ mac }}" = {{ upstreams | to_json }} }
  ]
  {% endfor %}
  {% endfor %}
  {% endif %}

{% endfor %}

# Network definitions
{% for network_id, network in ctrld_networks.items() %}
[network.{{ network_id }}]
name = "{{ network.name | default('Network ' + network_id) }}"
cidrs = {{ network.cidrs | default(['0.0.0.0/0']) | to_json }}
{% endfor %}

# Upstream resolver configuration
{% for upstream_id, upstream in ctrld_upstreams.items() %}
[upstream.{{ upstream_id }}]
name = "{{ upstream.name | default('Upstream ' + upstream_id) }}"
type = "{{ upstream.type | default('doh') }}"
endpoint = "{{ upstream.endpoint }}"
{% if upstream.bootstrap_ip is defined %}
bootstrap_ip = "{{ upstream.bootstrap_ip }}"
{% endif %}
timeout = {{ upstream.timeout | default(5000) }}
ip_stack = "{{ upstream.ip_stack | default('both') }}"
{% if upstream.send_client_info is defined %}
send_client_info = {{ upstream.send_client_info | lower }}
{% endif %}
{% if upstream.discoverable is defined %}
discoverable = {{ upstream.discoverable | lower }}
{% endif %}
{% endfor %}

# Default configuration if no custom upstreams provided
{% if ctrld_upstreams is not defined %}
[upstream.0]
name = "Control D - Anti-Malware"
type = "doh"
endpoint = "https://freedns.controld.com/p1"
bootstrap_ip = "76.76.2.11"
timeout = 5000
ip_stack = "split"

[upstream.1]
name = "Control D - No Ads"
type = "doq"
endpoint = "p2.freedns.controld.com"
bootstrap_ip = "76.76.2.11"
timeout = 3000
ip_stack = "split"

[upstream.local]
name = "Local DNS"
type = "os"
timeout = 2000
discoverable = true
{% endif %}

# Control D specific configuration
{% if resolver_id is defined %}
# This configuration is managed by Control D resolver ID: {{ resolver_id }}
# Custom upstream configuration may be overridden by Control D API
{% endif %}

# Router-specific optimizations
{% if is_router | default(false) %}
# Optimized settings for router deployment
[service]
cache_size = {{ ctrld_cache_size | default(4096) }}
max_concurrent_requests = {{ ctrld_max_concurrent_requests | default(256) }}

# Reduced discovery for router environments
discover_refresh_interval = {{ ctrld_discover_interval | default(300) }}
{% endif %}

# Development and testing overrides
{% if ctrld_dev_mode | default(false) %}
[service]
log_level = "debug"
cache_enable = false
dns_watchdog_enabled = false
{% endif %}

# Additional custom configuration
{% if ctrld_custom_config is defined %}
{{ ctrld_custom_config }}
{% endif %}
